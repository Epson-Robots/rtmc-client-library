//Original Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//Modifications Copyright 2025 Seiko Epson Corporation
//This file is a modified version of DDSCommunicationPublisher.h and DDSCommunicationSubscriber.h, which were originally generated by fastddsgen.
//Applied a namespace to the DDSCommunication class and added new functions

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DDSCommunicationPublisher.h
 * This header file contains the declaration of the publisher functions.
 *
 * This file was generated by the tool fastddsgen.
 */

 /*!
 * @file DDSCommunicationSubscriber.h
 * This header file contains the declaration of the subscriber functions.
 *
 * This file was generated by the tool fastddsgen.
 */


#ifndef _FAST_DDS_GENERATED_DDSCOMMUNICATION_PUBLISHER_H_
#define _FAST_DDS_GENERATED_DDSCOMMUNICATION_PUBLISHER_H_

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>

#include <fastdds/dds/domain/DomainParticipant.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/DataWriterListener.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/subscriber/DataReader.hpp>
#include <fastdds/dds/subscriber/DataReaderListener.hpp>
#include <fastdds/dds/subscriber/Subscriber.hpp>
#include <fastdds/dds/topic/TypeSupport.hpp>

#include <condition_variable>

#include "rtmc/rtmc_client.h"
#include "rtmc/dds_definition.h"
#include "rtmc/rtmc_definition.h"

namespace epson_rtmc_client
{
    struct RRD{
        unsigned short commandid;
        unsigned int  dwordparam;
        std::vector<uint8_t> exData;

    };

    struct RRDCoreData{
        unsigned short rrd_res_hi;
        unsigned short rrd_res_low;
        std::vector<uint8_t> exData;

    };


    class DDSCommunication
    {
    public:

        DDSCommunication();

        virtual ~DDSCommunication();

        bool init(const COMPROPERTY& com_property, bool com_property_option_flag, const COMPROPERTYOPT& com_property_option, const SECPROPERTY& sec_property);

        int DDS_Send(RRD rrddata_cmd,RRD* prrddata_res);
        bool DDSConnection();

        bool Get_NewStatus(unsigned short cmdID,RRD* prrddata_status,bool* pupdate);
        bool MakeRRDdata(unsigned short cmdid, unsigned int dwparam, const vector<uint8_t>& exdata, RRD& prrd_cmd);
        bool Check_exDataSize(const unsigned short& cmdID, const unsigned short& low_word, const RRDCoreData& rrd_res_core) const;

        bool wait_for_connect(unsigned int wait_time);

    private:

        eprosima::fastdds::dds::DomainParticipant* participant_;
        eprosima::fastdds::dds::Publisher* publisher_;
        eprosima::fastdds::dds::Subscriber* subscriber_;
        eprosima::fastdds::dds::Topic* topic_;
        eprosima::fastdds::dds::DataWriter* writer_;
        eprosima::fastdds::dds::DataReader* reader_;
        eprosima::fastdds::dds::TypeSupport type_;

        void Config_ParticipantQoS(eprosima::fastdds::dds::DomainParticipantQos* ppqos, COMPROPERTY com_property, bool com_property_option_flag,  COMPROPERTYOPT com_property_option, SECPROPERTY sec_property);
        void Config_PubSubQoS(eprosima::fastdds::dds::PublisherQos* ppbqos,eprosima::fastdds::dds::SubscriberQos* psbqos);
        void Config_WriteReadQoS(eprosima::fastdds::dds::DataWriterQos* pwqos,eprosima::fastdds::dds::DataReaderQos* prqos);

        bool Check_cmdID(unsigned short req_cmdid,unsigned short res_cmdid);

        std::mutex mutex_connect;
        std::condition_variable cv_connect;

        class PubListener : public eprosima::fastdds::dds::DataWriterListener
        {
        private:
        bool matched = false;
        bool disconnect=false;
        std::mutex* mutex_connect_ptr;
        std::condition_variable* cv_connect_ptr;

        public:

            PubListener() = default;

            ~PubListener() override = default;

            void init(std::condition_variable * cv_connect, std::mutex* pmutex_connect);

            void on_publication_matched(
                    eprosima::fastdds::dds::DataWriter* writer,
                    const eprosima::fastdds::dds::PublicationMatchedStatus& info) override;

            bool publisher_connection();


        }
        publistener_;

        class SubListener : public eprosima::fastdds::dds::DataReaderListener
        {
        private:
        bool matched = false;
        bool disconnect=false;
        bool newRCstatus=false;
        bool newJAstatus=false;
        bool FailedGetRRDData=false;
        RRD rrddata_cmdres;
        RRD rrddata_rc_status;
        RRD rrddata_ja_status;
        std::mutex mutex_rrd_;
        std::mutex* mutex_connect_ptr;
        pthread_mutex_t mutex_sig_;
        pthread_cond_t sig_condition;
        std::condition_variable* cv_connect_ptr;
    

        public:

            SubListener() = default;

            ~SubListener() override = default;

            void on_data_available(
                    eprosima::fastdds::dds::DataReader* reader) override;

            void on_subscription_matched(
                    eprosima::fastdds::dds::DataReader* reader,
                    const eprosima::fastdds::dds::SubscriptionMatchedStatus& info) override;

            void init(std::condition_variable * cv_connect, std::mutex* pmutex_connect);
            bool subscriber_connection();
            bool get_RRDData(unsigned short cmdid, RRD* prrddata,bool* update=nullptr);
            bool CanGetRRDData(){return (!FailedGetRRDData);};
            void Lock() { pthread_mutex_lock(&mutex_sig_);};
            void UnLock() { pthread_mutex_unlock(&mutex_sig_);};
            int TimedWait(timespec time);
        }
        sublistener_;

    };
}

#endif // _FAST_DDS_GENERATED_DDSCOMMUNICATION_PUBLISHER_H_