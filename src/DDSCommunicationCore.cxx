// Original Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//Modifications Copyright 2025 Seiko Epson Corporation
//This file is a modified version of DDSCommunication.cpp, which was originally generated by fastddsgen.
//The RRDStruct class has been placed within a namespace

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DDSCommunication.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "rtmc/DDSCommunicationCore.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

namespace epson_rtmc_client
{
    RRDSturuct::RRDSturuct()
    {
    }

    RRDSturuct::~RRDSturuct()
    {
    }

    RRDSturuct::RRDSturuct(
            const RRDSturuct& x) : m_exData(x.m_exData)
    {
        m_commandID = x.m_commandID;
        m_dwordParam = x.m_dwordParam;
    }

    RRDSturuct::RRDSturuct(
            RRDSturuct&& x) noexcept : m_exData (std::move(x.m_exData))
    {
        m_commandID = x.m_commandID;
        m_dwordParam = x.m_dwordParam;
    }

    RRDSturuct& RRDSturuct::operator =(
            const RRDSturuct& x)
    {

        m_commandID = x.m_commandID;
        m_dwordParam = x.m_dwordParam;
        m_exData = x.m_exData;
        return *this;
    }

    RRDSturuct& RRDSturuct::operator =(
            RRDSturuct&& x) noexcept
    {

        m_commandID = x.m_commandID;
        m_dwordParam = x.m_dwordParam;
        m_exData = std::move(x.m_exData);
        return *this;
    }

    bool RRDSturuct::operator ==(
            const RRDSturuct& x) const
    {
        return (m_commandID == x.m_commandID &&
            m_dwordParam == x.m_dwordParam &&
            m_exData == x.m_exData);
    }

    bool RRDSturuct::operator !=(
            const RRDSturuct& x) const
    {
        return !(*this == x);
    }

    /*!
    * @brief This function sets a value in member commandID
    * @param _commandID New value for member commandID
    */
    void RRDSturuct::commandID(
            uint16_t _commandID)
    {
        m_commandID = _commandID;
    }

    /*!
    * @brief This function returns the value of member commandID
    * @return Value of member commandID
    */
    uint16_t RRDSturuct::commandID() const
    {
        return m_commandID;
    }

    /*!
    * @brief This function returns a reference to member commandID
    * @return Reference to member commandID
    */
    uint16_t& RRDSturuct::commandID()
    {
        return m_commandID;
    }


    /*!
    * @brief This function sets a value in member dwordParam
    * @param _dwordParam New value for member dwordParam
    */
    void RRDSturuct::dwordParam(
            uint32_t _dwordParam)
    {
        m_dwordParam = _dwordParam;
    }

    /*!
    * @brief This function returns the value of member dwordParam
    * @return Value of member dwordParam
    */
    uint32_t RRDSturuct::dwordParam() const
    {
        return m_dwordParam;
    }

    /*!
    * @brief This function returns a reference to member dwordParam
    * @return Reference to member dwordParam
    */
    uint32_t& RRDSturuct::dwordParam()
    {
        return m_dwordParam;
    }


    /*!
    * @brief This function copies the value in member exData
    * @param _exData New value to be copied in member exData
    */
    void RRDSturuct::exData(
            const std::vector<uint8_t>& _exData)
    {
        m_exData = _exData;
    }

    /*!
    * @brief This function moves the value in member exData
    * @param _exData New value to be moved in member exData
    */
    void RRDSturuct::exData(
            std::vector<uint8_t>&& _exData)
    {
        m_exData = std::move(_exData);
    }

    /*!
    * @brief This function returns a constant reference to member exData
    * @return Constant reference to member exData
    */
    const std::vector<uint8_t>& RRDSturuct::exData() const
    {
        return m_exData;
    }

    /*!
    * @brief This function returns a reference to member exData
    * @return Reference to member exData
    */
    std::vector<uint8_t>& RRDSturuct::exData()
    {
        return m_exData;
    }
}

// Include auxiliary functions like for serializing/deserializing.
#include "rtmc/DDSCommunicationCdrAux.ipp"

